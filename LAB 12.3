//**************************************************
// Amer Sejdic	
// 10/31/16
// CPSC 230
// Prof. Lee
// LAB 12.3
// This program reads records from a file.  The file contains the
// following: student's name, two test grades and final exam grade. 
// It then prints this information to the screen.
//***************************************************


#include <fstream> 
#include <iostream>
#include <iomanip>
using namespace std;


const int NAMESIZE = 15;
const int MAXRECORDS = 50;

struct Grades 
{
	char name[NAMESIZE + 1];
	int test1;
	int test2;
	int final;
	char letter; // letter grade of student
};
typedef Grades gradeType[MAXRECORDS]; // This makes gradeType a data type that holds MAXRECORDS Grades structures.

void readIt(ifstream& inData, gradeType gradeRec, int& total);
char calcLetter(int t1, int t2, int fin);



int main()
{
	ifstream indata;
	indata.open("graderoll.dat");
	int numRecord; // number of records read in
	gradeType studentRecord;

	if (!indata)
	{
		cout << "Error opening file. \n";
		cout << "It may not exist where indicated" << endl;
		return 1;
	}

	
	readIt(indata, studentRecord, numRecord); 

	for (int count = 0; count < numRecord; count++)
	{
		cout << studentRecord[count].name << setw(10) << studentRecord[count].test1 << setw(10) << studentRecord[count].test2;
		cout << setw(10) << studentRecord[count].final;
		if (studentRecord[count].letter == 'X') cout << setw(10) << "Invalid" << endl;
		else cout << setw(10) << studentRecord[count].letter << endl;
	}
	system("pause");
	return 0;
}

//**************************************************************
// readIt
//
// task: This procedure reads records into an array of records from an input file and keeps track of the total number of records
//
// data in: data file containing information to be placed in the array
// data out: an array of records and the number of records
//**************************************************************

void readIt(ifstream& inData, gradeType gradeRec, int& total) 

{
	total = 0;
	inData.get(gradeRec[total].name, NAMESIZE); // to prime the read...
	while (inData)
	{
		// FILL IN THE CODE TO READ test1
		inData >> gradeRec[total].test1;
		// FILL IN THE CODE TO READ test2
		inData >> gradeRec[total].test2;
		// FILL IN THE CODE TO READ final
		inData >> gradeRec[total].final;
		// FILL IN THE CODE TO calculate and store letter
		gradeRec[total].letter = calcLetter(gradeRec[total].test1, gradeRec[total].test2, gradeRec[total].final);

		total++; // add one to total

		// FILL IN THE CODE TO CONSUME THE END OF LINE
		inData.ignore(101, '\n');
		// FILL IN THE CODE TO READ name
		inData.get(gradeRec[total].name, NAMESIZE);
	}
}

char calcLetter(int t1, int t2, int fin)
{
	char letterGrade;
	double finalScore = 0;

	finalScore = ((t1*.3) + (t2*.3) + (fin*.4));

	if (finalScore <= 100 && finalScore >= 90)
		return 'A';
	else if (finalScore < 90 && finalScore >= 80 ) 
		return 'B';
	else if (finalScore < 80 && finalScore >= 70)
		return 'C';
	else if (finalScore < 70 && finalScore >= 60)
		return 'D';
	else if (finalScore < 60 && finalScore >=0) 
		return 'F';
}
